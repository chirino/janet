/* -*-Java-*- */

/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Java Language Extensions (JANET) package.
 *
 * The Initial Developer of the Original Code is Dawid Kurzyniec.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Dawid Kurzyniec <dawidk@icsr.agh.edu.pl>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/* Important information:
 * THIS JAVA SOURCE FILE HAS BEEN AUTOMATICALLY GENERATED by the public domain
 * JB tool (see README.html for details) from template based on JB.
 */

package pl.edu.agh.icsr.janet;

public
abstract
class TokenTypes {

public static final int EOF = 0;

public static final int tokenmin = 257;
public static final int tokenmax = 347;

public static final int YYNONE = -1;
public static final int YYEOF = EOF;

public static final int LEX_ERROR = 257;
public static final int EPSILON = 258;
public static final int INTEGER_LITERAL = 259;
public static final int LONG_LITERAL = 260;
public static final int FLOAT_LITERAL = 261;
public static final int DOUBLE_LITERAL = 262;
public static final int BOOLEAN_LITERAL = 263;
public static final int STRING_LITERAL = 264;
public static final int CHARACTER_LITERAL = 265;
public static final int NULL_LITERAL = 266;
public static final int IDENTIFIER = 267;
public static final int ABSTRACT = 268;
public static final int ANDAND = 269;
public static final int BOOLEAN = 270;
public static final int BREAK = 271;
public static final int BYTE = 272;
public static final int CASE = 273;
public static final int CATCH = 274;
public static final int CHAR = 275;
public static final int CLASS = 276;
public static final int CONST = 277;
public static final int CONTINUE = 278;
public static final int DEFAULT = 279;
public static final int DO = 280;
public static final int DOUBLE = 281;
public static final int ELSE = 282;
public static final int EQADD = 283;
public static final int EQAND = 284;
public static final int EQDIV = 285;
public static final int EQEQ = 286;
public static final int EQLOGRSHIFT = 287;
public static final int EQLSHIFT = 288;
public static final int EQMOD = 289;
public static final int EQMUL = 290;
public static final int EQOR = 291;
public static final int EQRSHIFT = 292;
public static final int EQSUB = 293;
public static final int EQXOR = 294;
public static final int EXTENDS = 295;
public static final int FINAL = 296;
public static final int FINALLY = 297;
public static final int FLOAT = 298;
public static final int FOR = 299;
public static final int GE = 300;
public static final int GOTO = 301;
public static final int IF = 302;
public static final int IMPLEMENTS = 303;
public static final int IMPORT = 304;
public static final int INSTANCEOF = 305;
public static final int INT = 306;
public static final int INTERFACE = 307;
public static final int LE = 308;
public static final int LOGRSHIFT = 309;
public static final int LONG = 310;
public static final int LSHIFT = 311;
public static final int MINUSMINUS = 312;
public static final int NATIVE = 313;
public static final int NE = 314;
public static final int NEW = 315;
public static final int OROR = 316;
public static final int PACKAGE = 317;
public static final int PLUSPLUS = 318;
public static final int PRIVATE = 319;
public static final int PROTECTED = 320;
public static final int PUBLIC = 321;
public static final int RETURN = 322;
public static final int RSHIFT = 323;
public static final int SHORT = 324;
public static final int STATIC = 325;
public static final int SUPER = 326;
public static final int SWITCH = 327;
public static final int SYNCHRONIZED = 328;
public static final int STRICTFP = 329;
public static final int THIS = 330;
public static final int THROW = 331;
public static final int THROWS = 332;
public static final int TRANSIENT = 333;
public static final int TRY = 334;
public static final int VOID = 335;
public static final int VOLATILE = 336;
public static final int WHILE = 337;
public static final int NH_EXPRESSION = 338;
public static final int NH_STRING = 339;
public static final int NH_UNICODE_STRING = 340;
public static final int NH_ARRAY_PTR = 341;
public static final int NATIVE_STATEMENTS = 342;
public static final int NATIVE_STATEMENTS_WITH_JAVA_TAIL = 343;
public static final int NATIVE_BLOCK = 344;
public static final int NATIVE_EXPRESSION = 345;
public static final int NATIVE_STRING = 346;
public static final int NATIVE_UNICODE_STRING = 347;


public static final String tokennames[] = {
"LEX_ERROR",
"EPSILON",
"INTEGER_LITERAL",
"LONG_LITERAL",
"FLOAT_LITERAL",
"DOUBLE_LITERAL",
"BOOLEAN_LITERAL",
"STRING_LITERAL",
"CHARACTER_LITERAL",
"NULL_LITERAL",
"IDENTIFIER",
"ABSTRACT",
"ANDAND",
"BOOLEAN",
"BREAK",
"BYTE",
"CASE",
"CATCH",
"CHAR",
"CLASS",
"CONST",
"CONTINUE",
"DEFAULT",
"DO",
"DOUBLE",
"ELSE",
"EQADD",
"EQAND",
"EQDIV",
"EQEQ",
"EQLOGRSHIFT",
"EQLSHIFT",
"EQMOD",
"EQMUL",
"EQOR",
"EQRSHIFT",
"EQSUB",
"EQXOR",
"EXTENDS",
"FINAL",
"FINALLY",
"FLOAT",
"FOR",
"GE",
"GOTO",
"IF",
"IMPLEMENTS",
"IMPORT",
"INSTANCEOF",
"INT",
"INTERFACE",
"LE",
"LOGRSHIFT",
"LONG",
"LSHIFT",
"MINUSMINUS",
"NATIVE",
"NE",
"NEW",
"OROR",
"PACKAGE",
"PLUSPLUS",
"PRIVATE",
"PROTECTED",
"PUBLIC",
"RETURN",
"RSHIFT",
"SHORT",
"STATIC",
"SUPER",
"SWITCH",
"SYNCHRONIZED",
"STRICTFP",
"THIS",
"THROW",
"THROWS",
"TRANSIENT",
"TRY",
"VOID",
"VOLATILE",
"WHILE",
"NH_EXPRESSION",
"NH_STRING",
"NH_UNICODE_STRING",
"NH_ARRAY_PTR",
"NATIVE_STATEMENTS",
"NATIVE_STATEMENTS_WITH_JAVA_TAIL",
"NATIVE_BLOCK",
"NATIVE_EXPRESSION",
"NATIVE_STRING",
"NATIVE_UNICODE_STRING",
null
};

public static String tokenname(Integer t)
{return tokenname(t==null?EOF:t.intValue());}

public static String tokenname(int t)
{
    if(t >= tokenmin && t <= tokenmax) {
	return tokennames[t - tokenmin];
    } else if(t > 0 && t <= 255) {
	return "'" + String.valueOf((char)t) + "'";
    } else if(t == EOF) {
	return "EOF";
    } else {
	return "$undefined$";
    }
}

//////////////////////////////////////////////////

public static final int nontermmin = 348;
public static final int nontermmax = 526;

public static final int nt_Goal = 348;
public static final int nt_at_1 = 349;
public static final int nt_Literal = 350;
public static final int nt_Void = 351;
public static final int nt_Type = 352;
public static final int nt_PrimitiveType = 353;
public static final int nt_ReferenceType = 354;
public static final int nt_ClassOrInterfaceType = 355;
public static final int nt_ClassType = 356;
public static final int nt_InterfaceType = 357;
public static final int nt_ArrayType = 358;
public static final int nt_Name = 359;
public static final int nt_SimpleName = 360;
public static final int nt_CompilationUnit = 361;
public static final int nt_at_2 = 362;
public static final int nt_ImportDeclarations = 363;
public static final int nt_PackageDeclaration = 364;
public static final int nt_SingleTypeImportDeclaration = 365;
public static final int nt_TypeImportOnDemandDeclaration = 366;
public static final int nt_TypeDeclaration = 367;
public static final int nt_Modifiers = 368;
public static final int nt_Modifier = 369;
public static final int nt_NativeModifier = 370;
public static final int nt_ModifiersWithNative = 371;
public static final int nt_ClassDeclaration = 372;
public static final int nt_at_3 = 373;
public static final int nt_ClassHeader = 374;
public static final int nt_ClassHeaderHead = 375;
public static final int nt_Super = 376;
public static final int nt_Interfaces = 377;
public static final int nt_InterfaceTypeList = 378;
public static final int nt_ClassBody = 379;
public static final int nt_ClassBodyDeclarations = 380;
public static final int nt_ClassBodyDeclaration = 381;
public static final int nt_StaticNativeStatement = 382;
public static final int nt_at_4 = 383;
public static final int nt_at_5 = 384;
public static final int nt_ClassMemberDeclaration = 385;
public static final int nt_FieldDeclaration = 386;
public static final int nt_VariableDeclarators = 387;
public static final int nt_VariableDeclarator = 388;
public static final int nt_VariableDeclaratorId = 389;
public static final int nt_VariableInitializer = 390;
public static final int nt_MethodDeclaration = 391;
public static final int nt_MethodHeader = 392;
public static final int nt_MethodDeclarator = 393;
public static final int nt_at_6 = 394;
public static final int nt_FormalParameterList_opt = 395;
public static final int nt_FormalParameterList = 396;
public static final int nt_FormalParameter = 397;
public static final int nt_Throws_opt = 398;
public static final int nt_ClassTypeList = 399;
public static final int nt_MethodBody = 400;
public static final int nt_NativeMethodDeclaration = 401;
public static final int nt_NativeMethodHeader = 402;
public static final int nt_NativeMethodDeclarator = 403;
public static final int nt_at_7 = 404;
public static final int nt_NativeMethodBody = 405;
public static final int nt_NativeStatement = 406;
public static final int nt_at_8 = 407;
public static final int nt_StaticInitializer = 408;
public static final int nt_ConstructorDeclaration = 409;
public static final int nt_ConstructorHeader = 410;
public static final int nt_ConstructorDeclarator = 411;
public static final int nt_at_9 = 412;
public static final int nt_ConstructorBody = 413;
public static final int nt_at_10 = 414;
public static final int nt_ConstructorBodyStatements = 415;
public static final int nt_ExplicitConstructorInvocation = 416;
public static final int nt_InterfaceDeclaration = 417;
public static final int nt_InterfaceHeader = 418;
public static final int nt_InterfaceHeaderHead = 419;
public static final int nt_ExtendsInterfaces = 420;
public static final int nt_InterfaceBody = 421;
public static final int nt_InterfaceMemberDeclarations = 422;
public static final int nt_InterfaceMemberDeclaration = 423;
public static final int nt_ConstantDeclaration = 424;
public static final int nt_AbstractMethodDeclaration = 425;
public static final int nt_ArrayInitializer = 426;
public static final int nt_VariableInitializers = 427;
public static final int nt_Block = 428;
public static final int nt_at_11 = 429;
public static final int nt_BlockStatements_opt = 430;
public static final int nt_BlockStatements = 431;
public static final int nt_BlockStatement = 432;
public static final int nt_LocalVariableDeclarationStatement = 433;
public static final int nt_LocalVariableDeclaration = 434;
public static final int nt_Statement = 435;
public static final int nt_StatementNoShortIf = 436;
public static final int nt_StatementWithoutTrailingSubstatement = 437;
public static final int nt_EmptyStatement = 438;
public static final int nt_LabeledStatement = 439;
public static final int nt_LabeledStatementNoShortIf = 440;
public static final int nt_ExpressionStatement = 441;
public static final int nt_StatementExpression = 442;
public static final int nt_IfThenStatement = 443;
public static final int nt_IfThenElseStatement = 444;
public static final int nt_IfThenElseStatementNoShortIf = 445;
public static final int nt_SwitchStatement = 446;
public static final int nt_SwitchBlock = 447;
public static final int nt_SwitchBlockStatementGroups = 448;
public static final int nt_SwitchBlockStatementGroup = 449;
public static final int nt_SwitchLabels = 450;
public static final int nt_SwitchLabel = 451;
public static final int nt_WhileStatement = 452;
public static final int nt_WhileStatementNoShortIf = 453;
public static final int nt_DoStatement = 454;
public static final int nt_ForStatement = 455;
public static final int nt_ForStatementNoShortIf = 456;
public static final int nt_ForHeader = 457;
public static final int nt_at_12 = 458;
public static final int nt_ForInit_opt = 459;
public static final int nt_ForExpression_opt = 460;
public static final int nt_ForUpdate_opt = 461;
public static final int nt_StatementExpressionList = 462;
public static final int nt_BreakStatement = 463;
public static final int nt_ContinueStatement = 464;
public static final int nt_ReturnStatement = 465;
public static final int nt_ThrowStatement = 466;
public static final int nt_SynchronizedStatement = 467;
public static final int nt_TryStatement = 468;
public static final int nt_Catches = 469;
public static final int nt_CatchClause = 470;
public static final int nt_CatchClauseHead = 471;
public static final int nt_at_13 = 472;
public static final int nt_Finally = 473;
public static final int nt_NativeBlock = 474;
public static final int nt_at_14 = 475;
public static final int nt_at_15 = 476;
public static final int nt_NativeStatements_opt = 477;
public static final int nt_Primary = 478;
public static final int nt_BracedExpression = 479;
public static final int nt_PrimaryNoNewArray = 480;
public static final int nt_NativeExpression = 481;
public static final int nt_at_16 = 482;
public static final int nt_at_17 = 483;
public static final int nt_NativeString = 484;
public static final int nt_at_18 = 485;
public static final int nt_at_19 = 486;
public static final int nt_at_20 = 487;
public static final int nt_at_21 = 488;
public static final int nt_ClassLiteral = 489;
public static final int nt_ClassInstanceCreationExpression = 490;
public static final int nt_at_22 = 491;
public static final int nt_at_23 = 492;
public static final int nt_ArgumentList = 493;
public static final int nt_Arguments = 494;
public static final int nt_ArrayCreationExpression = 495;
public static final int nt_DimExprs = 496;
public static final int nt_DimExpr = 497;
public static final int nt_Dims = 498;
public static final int nt_FieldAccess = 499;
public static final int nt_MethodInvocation = 500;
public static final int nt_ArrayAccess = 501;
public static final int nt_PostfixExpression = 502;
public static final int nt_PostIncrementExpression = 503;
public static final int nt_PostDecrementExpression = 504;
public static final int nt_UnaryExpression = 505;
public static final int nt_PreIncrementExpression = 506;
public static final int nt_PreDecrementExpression = 507;
public static final int nt_UnaryExpressionNotPlusMinus = 508;
public static final int nt_CastExpression = 509;
public static final int nt_MultiplicativeExpression = 510;
public static final int nt_AdditiveExpression = 511;
public static final int nt_ShiftExpression = 512;
public static final int nt_RelationalExpression = 513;
public static final int nt_EqualityExpression = 514;
public static final int nt_AndExpression = 515;
public static final int nt_ExclusiveOrExpression = 516;
public static final int nt_InclusiveOrExpression = 517;
public static final int nt_ConditionalAndExpression = 518;
public static final int nt_ConditionalOrExpression = 519;
public static final int nt_ConditionalExpression = 520;
public static final int nt_AssignmentExpression = 521;
public static final int nt_Assignment = 522;
public static final int nt_LeftHandSide = 523;
public static final int nt_AssignmentOperator = 524;
public static final int nt_Expression = 525;
public static final int nt_ConstantExpression = 526;


public static final String nontermnames[] = {
"Goal",
"@1",
"Literal",
"Void",
"Type",
"PrimitiveType",
"ReferenceType",
"ClassOrInterfaceType",
"ClassType",
"InterfaceType",
"ArrayType",
"Name",
"SimpleName",
"CompilationUnit",
"@2",
"ImportDeclarations",
"PackageDeclaration",
"SingleTypeImportDeclaration",
"TypeImportOnDemandDeclaration",
"TypeDeclaration",
"Modifiers",
"Modifier",
"NativeModifier",
"ModifiersWithNative",
"ClassDeclaration",
"@3",
"ClassHeader",
"ClassHeaderHead",
"Super",
"Interfaces",
"InterfaceTypeList",
"ClassBody",
"ClassBodyDeclarations",
"ClassBodyDeclaration",
"StaticNativeStatement",
"@4",
"@5",
"ClassMemberDeclaration",
"FieldDeclaration",
"VariableDeclarators",
"VariableDeclarator",
"VariableDeclaratorId",
"VariableInitializer",
"MethodDeclaration",
"MethodHeader",
"MethodDeclarator",
"@6",
"FormalParameterList_opt",
"FormalParameterList",
"FormalParameter",
"Throws_opt",
"ClassTypeList",
"MethodBody",
"NativeMethodDeclaration",
"NativeMethodHeader",
"NativeMethodDeclarator",
"@7",
"NativeMethodBody",
"NativeStatement",
"@8",
"StaticInitializer",
"ConstructorDeclaration",
"ConstructorHeader",
"ConstructorDeclarator",
"@9",
"ConstructorBody",
"@10",
"ConstructorBodyStatements",
"ExplicitConstructorInvocation",
"InterfaceDeclaration",
"InterfaceHeader",
"InterfaceHeaderHead",
"ExtendsInterfaces",
"InterfaceBody",
"InterfaceMemberDeclarations",
"InterfaceMemberDeclaration",
"ConstantDeclaration",
"AbstractMethodDeclaration",
"ArrayInitializer",
"VariableInitializers",
"Block",
"@11",
"BlockStatements_opt",
"BlockStatements",
"BlockStatement",
"LocalVariableDeclarationStatement",
"LocalVariableDeclaration",
"Statement",
"StatementNoShortIf",
"StatementWithoutTrailingSubstatement",
"EmptyStatement",
"LabeledStatement",
"LabeledStatementNoShortIf",
"ExpressionStatement",
"StatementExpression",
"IfThenStatement",
"IfThenElseStatement",
"IfThenElseStatementNoShortIf",
"SwitchStatement",
"SwitchBlock",
"SwitchBlockStatementGroups",
"SwitchBlockStatementGroup",
"SwitchLabels",
"SwitchLabel",
"WhileStatement",
"WhileStatementNoShortIf",
"DoStatement",
"ForStatement",
"ForStatementNoShortIf",
"ForHeader",
"@12",
"ForInit_opt",
"ForExpression_opt",
"ForUpdate_opt",
"StatementExpressionList",
"BreakStatement",
"ContinueStatement",
"ReturnStatement",
"ThrowStatement",
"SynchronizedStatement",
"TryStatement",
"Catches",
"CatchClause",
"CatchClauseHead",
"@13",
"Finally",
"NativeBlock",
"@14",
"@15",
"NativeStatements_opt",
"Primary",
"BracedExpression",
"PrimaryNoNewArray",
"NativeExpression",
"@16",
"@17",
"NativeString",
"@18",
"@19",
"@20",
"@21",
"ClassLiteral",
"ClassInstanceCreationExpression",
"@22",
"@23",
"ArgumentList",
"Arguments",
"ArrayCreationExpression",
"DimExprs",
"DimExpr",
"Dims",
"FieldAccess",
"MethodInvocation",
"ArrayAccess",
"PostfixExpression",
"PostIncrementExpression",
"PostDecrementExpression",
"UnaryExpression",
"PreIncrementExpression",
"PreDecrementExpression",
"UnaryExpressionNotPlusMinus",
"CastExpression",
"MultiplicativeExpression",
"AdditiveExpression",
"ShiftExpression",
"RelationalExpression",
"EqualityExpression",
"AndExpression",
"ExclusiveOrExpression",
"InclusiveOrExpression",
"ConditionalAndExpression",
"ConditionalOrExpression",
"ConditionalExpression",
"AssignmentExpression",
"Assignment",
"LeftHandSide",
"AssignmentOperator",
"Expression",
"ConstantExpression",
null
};

public static String nontermname(int t)
{
    if(t >= nontermmin && t <= nontermmax) {
	return nontermnames[t - nontermmin];
    } else {
	return "$undefined$";
    }
}

//////////////////////////////////////////////////
};
